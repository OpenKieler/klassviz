/*
* generated by Xtext
*/
package de.cau.cs.kieler.klassviz.text.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.kieler.klassviz.text.services.ClassDataGrammarAccess;

public class ClassDataParser extends AbstractContentAssistParser {
	
	@Inject
	private ClassDataGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.kieler.klassviz.text.ui.contentassist.antlr.internal.InternalClassDataParser createParser() {
		de.cau.cs.kieler.klassviz.text.ui.contentassist.antlr.internal.InternalClassDataParser result = new de.cau.cs.kieler.klassviz.text.ui.contentassist.antlr.internal.InternalClassDataParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getKClassModelAccess().getAlternatives_1_1(), "rule__KClassModel__Alternatives_1_1");
					put(grammarAccess.getKTypeAccess().getAlternatives(), "rule__KType__Alternatives");
					put(grammarAccess.getKClassAccess().getAlternatives_2_1(), "rule__KClass__Alternatives_2_1");
					put(grammarAccess.getKInterfaceAccess().getAlternatives_2_1(), "rule__KInterface__Alternatives_2_1");
					put(grammarAccess.getKEnumAccess().getAlternatives_2_1(), "rule__KEnum__Alternatives_2_1");
					put(grammarAccess.getPropertyValueAccess().getAlternatives(), "rule__PropertyValue__Alternatives");
					put(grammarAccess.getFloatAccess().getAlternatives(), "rule__Float__Alternatives");
					put(grammarAccess.getKClassModelAccess().getGroup(), "rule__KClassModel__Group__0");
					put(grammarAccess.getKClassModelAccess().getGroup_1(), "rule__KClassModel__Group_1__0");
					put(grammarAccess.getKClassModelAccess().getGroup_1_1_0(), "rule__KClassModel__Group_1_1_0__0");
					put(grammarAccess.getKClassModelAccess().getGroup_1_1_1(), "rule__KClassModel__Group_1_1_1__0");
					put(grammarAccess.getKOptionAccess().getGroup(), "rule__KOption__Group__0");
					put(grammarAccess.getKPackageAccess().getGroup(), "rule__KPackage__Group__0");
					put(grammarAccess.getKClassAccess().getGroup(), "rule__KClass__Group__0");
					put(grammarAccess.getKClassAccess().getGroup_2(), "rule__KClass__Group_2__0");
					put(grammarAccess.getKInterfaceAccess().getGroup(), "rule__KInterface__Group__0");
					put(grammarAccess.getKInterfaceAccess().getGroup_2(), "rule__KInterface__Group_2__0");
					put(grammarAccess.getKEnumAccess().getGroup(), "rule__KEnum__Group__0");
					put(grammarAccess.getKEnumAccess().getGroup_2(), "rule__KEnum__Group_2__0");
					put(grammarAccess.getKMethodAccess().getGroup(), "rule__KMethod__Group__0");
					put(grammarAccess.getKMethodAccess().getGroup_2(), "rule__KMethod__Group_2__0");
					put(grammarAccess.getKMethodAccess().getGroup_2_1(), "rule__KMethod__Group_2_1__0");
					put(grammarAccess.getQualifiedIDAccess().getGroup(), "rule__QualifiedID__Group__0");
					put(grammarAccess.getQualifiedIDAccess().getGroup_1(), "rule__QualifiedID__Group_1__0");
					put(grammarAccess.getKClassModelAccess().getJavaProjectsAssignment_1_1_0_1(), "rule__KClassModel__JavaProjectsAssignment_1_1_0_1");
					put(grammarAccess.getKClassModelAccess().getBundlesAssignment_1_1_1_1(), "rule__KClassModel__BundlesAssignment_1_1_1_1");
					put(grammarAccess.getKClassModelAccess().getOptionsAssignment_2(), "rule__KClassModel__OptionsAssignment_2");
					put(grammarAccess.getKClassModelAccess().getPackagesAssignment_3(), "rule__KClassModel__PackagesAssignment_3");
					put(grammarAccess.getKOptionAccess().getKeyAssignment_1(), "rule__KOption__KeyAssignment_1");
					put(grammarAccess.getKOptionAccess().getValueAssignment_3(), "rule__KOption__ValueAssignment_3");
					put(grammarAccess.getKPackageAccess().getNameAssignment_1(), "rule__KPackage__NameAssignment_1");
					put(grammarAccess.getKPackageAccess().getTypesAssignment_3(), "rule__KPackage__TypesAssignment_3");
					put(grammarAccess.getKClassAccess().getNameAssignment_1(), "rule__KClass__NameAssignment_1");
					put(grammarAccess.getKClassAccess().getFieldsAssignment_2_1_0(), "rule__KClass__FieldsAssignment_2_1_0");
					put(grammarAccess.getKClassAccess().getMethodsAssignment_2_1_1(), "rule__KClass__MethodsAssignment_2_1_1");
					put(grammarAccess.getKInterfaceAccess().getNameAssignment_1(), "rule__KInterface__NameAssignment_1");
					put(grammarAccess.getKInterfaceAccess().getFieldsAssignment_2_1_0(), "rule__KInterface__FieldsAssignment_2_1_0");
					put(grammarAccess.getKInterfaceAccess().getMethodsAssignment_2_1_1(), "rule__KInterface__MethodsAssignment_2_1_1");
					put(grammarAccess.getKEnumAccess().getNameAssignment_1(), "rule__KEnum__NameAssignment_1");
					put(grammarAccess.getKEnumAccess().getFieldsAssignment_2_1_0(), "rule__KEnum__FieldsAssignment_2_1_0");
					put(grammarAccess.getKEnumAccess().getMethodsAssignment_2_1_1(), "rule__KEnum__MethodsAssignment_2_1_1");
					put(grammarAccess.getKFieldAccess().getNameAssignment(), "rule__KField__NameAssignment");
					put(grammarAccess.getKMethodAccess().getNameAssignment_0(), "rule__KMethod__NameAssignment_0");
					put(grammarAccess.getKMethodAccess().getParametersAssignment_2_0(), "rule__KMethod__ParametersAssignment_2_0");
					put(grammarAccess.getKMethodAccess().getParametersAssignment_2_1_1(), "rule__KMethod__ParametersAssignment_2_1_1");
					put(grammarAccess.getKTypeReferenceAccess().getSignatureAssignment(), "rule__KTypeReference__SignatureAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.kieler.klassviz.text.ui.contentassist.antlr.internal.InternalClassDataParser typedParser = (de.cau.cs.kieler.klassviz.text.ui.contentassist.antlr.internal.InternalClassDataParser) parser;
			typedParser.entryRuleKClassModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ClassDataGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ClassDataGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
