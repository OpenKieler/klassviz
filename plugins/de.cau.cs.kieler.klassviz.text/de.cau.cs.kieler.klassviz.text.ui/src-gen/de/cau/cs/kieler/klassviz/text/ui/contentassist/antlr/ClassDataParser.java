/*
* generated by Xtext
*/
package de.cau.cs.kieler.klassviz.text.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.kieler.klassviz.text.services.ClassDataGrammarAccess;

public class ClassDataParser extends AbstractContentAssistParser {
	
	@Inject
	private ClassDataGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.kieler.klassviz.text.ui.contentassist.antlr.internal.InternalClassDataParser createParser() {
		de.cau.cs.kieler.klassviz.text.ui.contentassist.antlr.internal.InternalClassDataParser result = new de.cau.cs.kieler.klassviz.text.ui.contentassist.antlr.internal.InternalClassDataParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getKTypeSelectionAccess().getAlternatives_1_1(), "rule__KTypeSelection__Alternatives_1_1");
					put(grammarAccess.getKTypeAccess().getAlternatives_3(), "rule__KType__Alternatives_3");
					put(grammarAccess.getPropertyValueAccess().getAlternatives(), "rule__PropertyValue__Alternatives");
					put(grammarAccess.getFloatAccess().getAlternatives(), "rule__Float__Alternatives");
					put(grammarAccess.getKTypeSelectionAccess().getGroup(), "rule__KTypeSelection__Group__0");
					put(grammarAccess.getKTypeSelectionAccess().getGroup_1(), "rule__KTypeSelection__Group_1__0");
					put(grammarAccess.getKTypeSelectionAccess().getGroup_1_1_0(), "rule__KTypeSelection__Group_1_1_0__0");
					put(grammarAccess.getKTypeSelectionAccess().getGroup_1_1_1(), "rule__KTypeSelection__Group_1_1_1__0");
					put(grammarAccess.getKTypeAccess().getGroup(), "rule__KType__Group__0");
					put(grammarAccess.getKMethodAccess().getGroup(), "rule__KMethod__Group__0");
					put(grammarAccess.getKMethodAccess().getGroup_2(), "rule__KMethod__Group_2__0");
					put(grammarAccess.getKMethodAccess().getGroup_2_1(), "rule__KMethod__Group_2_1__0");
					put(grammarAccess.getKParameterTypeSignatureAccess().getGroup(), "rule__KParameterTypeSignature__Group__0");
					put(grammarAccess.getQualifiedIDAccess().getGroup(), "rule__QualifiedID__Group__0");
					put(grammarAccess.getQualifiedIDAccess().getGroup_1(), "rule__QualifiedID__Group_1__0");
					put(grammarAccess.getKTypeSelectionAccess().getJavaProjectsAssignment_1_1_0_1(), "rule__KTypeSelection__JavaProjectsAssignment_1_1_0_1");
					put(grammarAccess.getKTypeSelectionAccess().getBundlesAssignment_1_1_1_1(), "rule__KTypeSelection__BundlesAssignment_1_1_1_1");
					put(grammarAccess.getKTypeSelectionAccess().getTypesAssignment_2(), "rule__KTypeSelection__TypesAssignment_2");
					put(grammarAccess.getKTypeAccess().getQualifiedNameAssignment_1(), "rule__KType__QualifiedNameAssignment_1");
					put(grammarAccess.getKTypeAccess().getFieldsAssignment_3_0(), "rule__KType__FieldsAssignment_3_0");
					put(grammarAccess.getKTypeAccess().getMethodsAssignment_3_1(), "rule__KType__MethodsAssignment_3_1");
					put(grammarAccess.getKFieldAccess().getNameAssignment(), "rule__KField__NameAssignment");
					put(grammarAccess.getKMethodAccess().getNameAssignment_0(), "rule__KMethod__NameAssignment_0");
					put(grammarAccess.getKMethodAccess().getParameterTypeSignaturesAssignment_2_0(), "rule__KMethod__ParameterTypeSignaturesAssignment_2_0");
					put(grammarAccess.getKMethodAccess().getParameterTypeSignaturesAssignment_2_1_1(), "rule__KMethod__ParameterTypeSignaturesAssignment_2_1_1");
					put(grammarAccess.getKParameterTypeSignatureAccess().getNameAssignment_1(), "rule__KParameterTypeSignature__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.kieler.klassviz.text.ui.contentassist.antlr.internal.InternalClassDataParser typedParser = (de.cau.cs.kieler.klassviz.text.ui.contentassist.antlr.internal.InternalClassDataParser) parser;
			typedParser.entryRuleKTypeSelection();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ClassDataGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ClassDataGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
