/*
* generated by Xtext
*/
grammar InternalClassData;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cau.cs.kieler.klassviz.text.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.klassviz.text.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.klassviz.text.services.ClassDataGrammarAccess;

}

@parser::members {

 	private ClassDataGrammarAccess grammarAccess;
 	
    public InternalClassDataParser(TokenStream input, ClassDataGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "KTypeSelection";	
   	}
   	
   	@Override
   	protected ClassDataGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleKTypeSelection
entryRuleKTypeSelection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKTypeSelectionRule()); }
	 iv_ruleKTypeSelection=ruleKTypeSelection 
	 { $current=$iv_ruleKTypeSelection.current; } 
	 EOF 
;

// Rule KTypeSelection
ruleKTypeSelection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getKTypeSelectionAccess().getKTypeSelectionAction_0(),
            $current);
    }
)(	otherlv_1='import' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getKTypeSelectionAccess().getImportKeyword_1_0());
    }
((	otherlv_2='project' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getKTypeSelectionAccess().getProjectKeyword_1_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKTypeSelectionAccess().getJavaProjectsQualifiedIDParserRuleCall_1_1_0_1_0()); 
	    }
		lv_javaProjects_3_0=ruleQualifiedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKTypeSelectionRule());
	        }
       		add(
       			$current, 
       			"javaProjects",
        		lv_javaProjects_3_0, 
        		"QualifiedID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='bundle' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getKTypeSelectionAccess().getBundleKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKTypeSelectionAccess().getBundlesQualifiedIDParserRuleCall_1_1_1_1_0()); 
	    }
		lv_bundles_5_0=ruleQualifiedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKTypeSelectionRule());
	        }
       		add(
       			$current, 
       			"bundles",
        		lv_bundles_5_0, 
        		"QualifiedID");
	        afterParserOrEnumRuleCall();
	    }

)
))))*(
(
		{ 
	        newCompositeNode(grammarAccess.getKTypeSelectionAccess().getTypesKTypeParserRuleCall_2_0()); 
	    }
		lv_types_6_0=ruleKType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKTypeSelectionRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_6_0, 
        		"KType");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleKType
entryRuleKType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKTypeRule()); }
	 iv_ruleKType=ruleKType 
	 { $current=$iv_ruleKType.current; } 
	 EOF 
;

// Rule KType
ruleKType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKTypeAccess().getTypeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKTypeAccess().getQualifiedNameQualifiedIDParserRuleCall_1_0()); 
	    }
		lv_qualifiedName_1_0=ruleQualifiedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKTypeRule());
	        }
       		set(
       			$current, 
       			"qualifiedName",
        		lv_qualifiedName_1_0, 
        		"QualifiedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getKTypeAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getKTypeAccess().getFieldsKFieldParserRuleCall_3_0_0()); 
	    }
		lv_fields_3_0=ruleKField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKTypeRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_3_0, 
        		"KField");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getKTypeAccess().getMethodsKMethodParserRuleCall_3_1_0()); 
	    }
		lv_methods_4_0=ruleKMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKTypeRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_4_0, 
        		"KMethod");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKTypeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleKField
entryRuleKField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKFieldRule()); }
	 iv_ruleKField=ruleKField 
	 { $current=$iv_ruleKField.current; } 
	 EOF 
;

// Rule KField
ruleKField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getKFieldAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleKMethod
entryRuleKMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKMethodRule()); }
	 iv_ruleKMethod=ruleKMethod 
	 { $current=$iv_ruleKMethod.current; } 
	 EOF 
;

// Rule KMethod
ruleKMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getKMethodAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getKMethodAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getKMethodAccess().getParameterTypeSignaturesKParameterTypeSignatureParserRuleCall_2_0_0()); 
	    }
		lv_parameterTypeSignatures_2_0=ruleKParameterTypeSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKMethodRule());
	        }
       		add(
       			$current, 
       			"parameterTypeSignatures",
        		lv_parameterTypeSignatures_2_0, 
        		"KParameterTypeSignature");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKMethodAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKMethodAccess().getParameterTypeSignaturesKParameterTypeSignatureParserRuleCall_2_1_1_0()); 
	    }
		lv_parameterTypeSignatures_4_0=ruleKParameterTypeSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKMethodRule());
	        }
       		add(
       			$current, 
       			"parameterTypeSignatures",
        		lv_parameterTypeSignatures_4_0, 
        		"KParameterTypeSignature");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKMethodAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleKParameterTypeSignature
entryRuleKParameterTypeSignature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKParameterTypeSignatureRule()); }
	 iv_ruleKParameterTypeSignature=ruleKParameterTypeSignature 
	 { $current=$iv_ruleKParameterTypeSignature.current; } 
	 EOF 
;

// Rule KParameterTypeSignature
ruleKParameterTypeSignature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getKParameterTypeSignatureAccess().getKParameterTypeSignatureAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getKParameterTypeSignatureAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKParameterTypeSignatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleQualifiedID
entryRuleQualifiedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedIDRule()); } 
	 iv_ruleQualifiedID=ruleQualifiedID 
	 { $current=$iv_ruleQualifiedID.current.getText(); }  
	 EOF 
;

// Rule QualifiedID
ruleQualifiedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;







// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatRule()); } 
	 iv_ruleFloat=ruleFloat 
	 { $current=$iv_ruleFloat.current.getText(); }  
	 EOF 
;

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_TFLOAT_0=RULE_TFLOAT    {
		$current.merge(this_TFLOAT_0);
    }

    { 
    newLeafNode(this_TFLOAT_0, grammarAccess.getFloatAccess().getTFLOATTerminalRuleCall_0()); 
    }

    |    this_NATURAL_1=RULE_NATURAL    {
		$current.merge(this_NATURAL_1);
    }

    { 
    newLeafNode(this_NATURAL_1, grammarAccess.getFloatAccess().getNATURALTerminalRuleCall_1()); 
    }
)
    ;





RULE_BOOLEAN : ('true'|'false');

RULE_TFLOAT : (('+'|'-') (('0'..'9')+ ('.' ('0'..'9')*)? (('e'|'E') ('+'|'-')? ('0'..'9')+)?|'.' ('0'..'9')+ (('e'|'E') ('+'|'-')? ('0'..'9')+)?)|('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)?|'.' ('0'..'9')+ (('e'|'E') ('+'|'-')? ('0'..'9')+)?|('0'..'9')+ ('e'|'E') ('+'|'-')? ('0'..'9')+);

RULE_NATURAL : ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


